#+title: Emacs configuration
#+PROPERTY: header-args :tangle yes

* Package management

** Package archives

#+begin_src elisp
(setq-default package-archives
'(("elpa" . "https://elpa.gnu.org/packages/")
("melpa" . "https://melpa.org/packages/"))
)
#+end_src

** Init package if version is less than 27

#+begin_src elisp
(when (< emacs-major-version 27)
  (require 'package)
  (package-initialize))

(when (>= emacs-major-version 27)
  (setq package-enable-at-startup nil))
#+end_src


** straight.el setup

#+begin_src elisp
;; Boostrap `straight.el`
(defvar bootstrap-version)
(let ((bootstrap-file
  (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))

(bootstrap-version 5))

(unless (file-exists-p bootstrap-file)
  (with-current-buffer
  (url-retrieve-synchronously
  "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
  'silent 'inhibit-cookies)
  
  (goto-char (point-max))
  (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
  
(straight-use-package 'use-package) ;; Install use-package

(setq use-package-always-ensure t)
#+end_src

* Global settings

#+begin_src elisp
(setq-default
auto-save-list-file-prefix nil         ; Prevent tracking for auto-saves
cursor-in-non-selected-windows nil     ; Hide the cursor in inactive windows
delete-by-moving-to-trash t            ; Delete files to trash
fill-column 80                         ; Set width for automatic line breaks
gc-cons-threshold (* 100 1024 1024)    ; We're not using Game Boys anymore
inhibit-startup-screen t               ; Disable start-up screen
initial-scratch-message ""             ; Empty the initial *scratch* buffer
mouse-yank-at-point t                  ; Yank at point rather than pointer
native-comp-async-report-warnings-errors 'silent ; Skip compilation error buffers
read-process-output-max (* 1024 1024)  ; Increase read size per process
scroll-conservatively 101              ; Avoid recentering when scrolling far
scroll-margin 2                        ; Add a margin when scrolling vertically
select-enable-clipboard t              ; Merge system's and Emacs' clipboard
sentence-end-double-space nil          ; Use a single space after dots
show-help-function nil                 ; Disable help text everywhere
tab-always-indent 'complete            ; Indent first then try completions
use-short-answers t                    ; Replace yes/no prompts with y/n
window-combination-resize t            ; Resize windows proportionally
x-stretch-cursor t)                    ; Stretch cursor to the glyph width
#+end_src


#+begin_src elisp
(delete-selection-mode 1)               ; Replace region when inserting text
#+end_src

#+begin_src elisp
(set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
#+end_src

* GUI modifications

#+begin_src elisp

(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)

#+end_src

#+begin_src elisp
(setq-default show-trailing-whitespace t)
#+end_src

** Theme

#+begin_src elisp
(use-package nano-theme
:ensure t
:config
(nano-mode)
(nano-dark)
)

(use-package nano-modeline
:config (nano-modeline-mode))
#+end_src


* Packages

** Version control systems

#+begin_src elisp
(use-package magit
:ensure t
:bind ("C-x g" . magit-status))
#+end_src


** Autcompletion



#+begin_src elisp

(use-package lsp-mode
:hook ((prog-mode . lsp))
:config
(setq lsp-completion-provider :capf)
(setq lsp-completion-enable t)
(setq  lsp-lens-enable t)
(setq read-process-output-max (* 2048 4096))
(setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=error" "--header-insertion=never"))
:commands lsp
)

(use-package lsp-ui :commands lsp-ui-mode)
#+end_src

*** Language Server Protocol

#+begin_src elisp
(use-package lsp-mode
  :ensure
  :commands lsp
  :custom
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.1)
  
;; Rust specific
  (lsp-rust-analyzer-server-display-inlay-hints t)
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-proc-macro-enable t)


  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))

(use-package lsp-ui
  :ensure
  :commands lsp-ui-mode
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil))
#+end_src

*** Company

#+begin_src elisp
  (use-package company
:ensure t
  :custom
  (company-idle-delay 0.0)
  (company-minimum-prefix-length 1)
  :config
  (global-company-mode t)	
  )

  (use-package company-box
  :hook (company-mode . company-box-mode)
  :custom
  (company-box-max-candidates 50)
  (company-box-show-single-candidate 'always))

#+end_src

** Colours

#+begin_src elisp
(use-package rainbow-mode
:config
(setq rainbow-x-colors nil)
(add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src

** Multiple cursors

#+begin_src elisp
(use-package multiple-cursors
:config
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+end_src


** Editorconfig

#+begin_src elisp
(use-package editorconfig
:config
(editorconfig-mode 1))
#+end_src

* Programming languages

** C++

** Rust

#+begin_src elisp
(use-package rustic
  :config
  (setq rustic-format-on-save t))
#+end_src

** Python
