#+title: ShadowMitia's emacs configuration
#+PROPERTY: header-args :tangle yes

* Package management

** Package archives

#+begin_src elisp
(setq-default package-archives
	      '(("elpa" . "https://elpa.gnu.org/packages/")
		("melpa" . "https://melpa.org/packages/")
		("nongnu" . "https://elpa.nongnu.org/nongnu/")
		)
	      )
#+end_src

** Package

#+begin_src elisp
(when (< emacs-major-version 27)
  (require 'package)
  (package-initialize))

(when (>= emacs-major-version 27)
  (setq package-enable-at-startup nil))
#+end_src


** straight.el setup

TODO: probably move to built-in way?

#+begin_src elisp

;; https://www.reddit.com/r/emacs/comments/mtb05k/emacs_init_time_decreased_65_after_i_realized_the/
(setq straight-check-for-modifications '(check-on-save find-when-checking))

(setq-default straight-use-package-by-default t)

;; Boostrap `straight.el`
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package) ;; Install use-package
#+end_src


**

#+begin_src elisp
(setq gc-cons-threshold (* 100 1024 1024)
      large-file-warning-threshold nil
      vc-follow-symlinks t
      )
#+end_src

* Org

#+begin_src elisp
(use-package org
  :straight (:type built-in)
  :custom
  (org-fold-catch-invisible-edits 'smart)
  (org-fontify-quote-and-verse-blocks t)
  (org-special-ctrl-a/e t)
  (org-export-with-sub-superscripts '{})
  (org-pretty-entities t)
  (org-pretty-entities-include-sub-superscripts t)
  (org-use-sub-superscripts '{}) ; Do the same when rendering the Org buffer
  (org-src-fontify-natively t)

  )

(setq-default org-src-fontify-natively t         ; Fontify code in code blocks.
	      org-adapt-indentation nil          ; Adaptive indentation
	      org-src-tab-acts-natively t        ; Tab acts as in source editing
	      org-confirm-babel-evaluate nil     ; No confirmation before executing code
	      org-edit-src-content-indentation 0 ; No relative indentation for code blocks
	      org-fontify-whole-block-delimiter-line t) ; Fontify whole block
(setq org-confirm-babel-evaluate nil)
(setq org-src-tab-acts-natively t)

(setq org-latex-listings 'minted)

(setq-default org-src-fontify-natively t         ; Fontify code in code blocks.
              org-adapt-indentation nil          ; Adaptive indentation
              org-src-tab-acts-natively t        ; Tab acts as in source editing
              org-confirm-babel-evaluate nil     ; No confirmation before executing code
              org-edit-src-content-indentation 0 ; No relative indentation for code blocks
              org-fontify-whole-block-delimiter-line t) ; Fontify whole block

(use-package org-contrib)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (dot . t)
   (gnuplot . t)
   (python . t)
   (C . t)
   (shell . t)
   (css . t)
   (sed . t)
   (dot . t)
   (latex . t)
   ;;   (ly . t)
   (lua . t)
   (lisp . t)
   (makefile . t)
   (js . t)
   (ocaml . t)
   (octave . t)
   (org . t)
   (processing . t)
   (scheme . t)
   (sql . t)
   (sqlite . t)
   (calc . t)
   ;; contrib
   (coq . t)
   ))

(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

#+end_src




** Modernify

TODO: CUA mode?

#+begin_src elisp
(delete-selection-mode 1)               ; Replace region when inserting text
#+end_src


* Theme

From https://github.com/rougier/dotemacs/blob/master/dotemacs.org

#+begin_src elisp
;; NANO splash
(straight-use-package
 '(nano-splash :type git :host github :repo "rougier/nano-splash"))

;; NANO theme
(straight-use-package
 '(nano-theme :type git :host github :repo "rougier/nano-theme"))

;; NANO modeline
(straight-use-package
 '(nano-modeline :type git :host github :repo "rougier/nano-modeline"))

;; NANO agenda
(straight-use-package
 '(nano-agenda :type git :host github :repo "rougier/nano-agenda"))

(defun first-graphical-frame-hook-function ()
  (remove-hook 'focus-in-hook #'first-graphical-frame-hook-function)
  (provide 'my-gui))
(add-hook 'focus-in-hook #'first-graphical-frame-hook-function)

(with-eval-after-load 'my-gui
  (setq svg-lib-style-default (svg-lib-style-compute-default)))

;; NANO agenda
(straight-use-package
 '(minibuffer-header :type git :host github :repo "rougier/minibuffer-header"))

;; SVG tags, progress bars & icons
(straight-use-package
 '(svg-lib :type git :host github :repo "rougier/svg-lib"))

;; Replace keywords with SVG tags
(straight-use-package
 '(svg-tag-mode :type git :host github :repo "rougier/svg-tag-mode"))

;; Dashboard for mu4e
(straight-use-package
 '(mu4e-dashboard :type git :host github :repo "rougier/mu4e-dashboard"))

;; Folding mode for mu4e
(straight-use-package
 '(mu4e-folding :type git :host github :repo "rougier/mu4e-folding"))

;; Relative date formatting
(straight-use-package
 '(relative-date :type git :host github :repo "rougier/relative-date"))

;; org imenu
(straight-use-package
 '(org-imenu :type git :host github :repo "rougier/org-imenu"))

;; pdf-drop-mode
(straight-use-package
 '(pdf-drop-mode :type git :host github :repo "rougier/pdf-drop-mode"))


;; Bilbliography manager in org mode
(straight-use-package
 '(org-bib :type git :host github :branch "org-imenu" :repo "rougier/org-bib-mode"))

(use-package nano-theme
  :config
  (setq nano-fonts-use nil) ; Use theme font stack
  (nano-dark)            ; Use theme dark version
  (nano-mode)             ; Recommended settings
  )


(use-package nano-modeline
  :config
  (nano-modeline-text-mode t)
  (nano-modeline-prog-mode t)
  (setq nano-modeline-prefix 'status)
  (setq nano-modeline-prefix-padding 1)

  (add-hook 'prog-mode-hook            #'nano-modeline-prog-mode)
  (add-hook 'text-mode-hook            #'nano-modeline-text-mode)
  (add-hook 'org-mode-hook             #'nano-modeline-org-mode)
  (add-hook 'pdf-view-mode-hook        #'nano-modeline-pdf-mode)
  ;;(add-hook 'mu4e-headers-mode-hook    #'nano-modeline-mu4e-headers-mode)
  ;;(add-hook 'mu4e-view-mode-hook       #'nano-modeline-mu4e-message-mode)
  ;;(add-hook 'elfeed-show-mode-hook     #'nano-modeline-elfeed-entry-mode)
  ;;(add-hook 'elfeed-search-mode-hook   #'nano-modeline-elfeed-search-mode)
  (add-hook 'term-mode-hook            #'nano-modeline-term-mode)
  (add-hook 'xwidget-webkit-mode-hook  #'nano-modeline-xwidget-mode)
  (add-hook 'messages-buffer-mode-hook #'nano-modeline-message-mode)
  (add-hook 'org-capture-mode-hook     #'nano-modeline-org-capture-mode)
  (add-hook 'org-agenda-mode-hook      #'nano-modeline-org-agenda-mode)

  )



(use-package svg-lib)
(use-package svg-tag-mode
  :config
  (setq svg-tag-tags
	'(
	  ("\\(TODO\\|FIXME\\|NOTES\\|NOTE\\)" . ((lambda (tag) (svg-lib-tag tag nil :background "#d08770" :stroke 2 :foreground "white") ) ))
	  ("NOCOMMIT" . ((lambda (tag) (svg-lib-tag tag nil :background "#bf616a" :stroke 2 :foreground "white") )))
	  ))
  (global-svg-tag-mode)
  )
#+end_src

* GUI modifications


Disable splash screen

#+begin_src elisp
(setq inhibit-startup-message t) ; Don't show splash screen
#+end_src

Turn off unneeded UI elements

Note: menu-bar-mode is recommended to discover new features (especially for beginners!)

#+begin_src elisp
;;(menu-bar-mode -1)
;;(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

#+begin_src elisp
(setq-default show-trailing-whitespace t)
#+end_src

** Typography

** Keep emacs clean!

Mostly taken from https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Tips-Cleaning.org

#+begin_src elisp
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

;; auto-save-mode doesn't create the path automatically!
(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

(setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

(use-package no-littering)
#+end_src



** Show matching parenthesis

#+begin_src elisp
(use-package paren
  :config
  (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
  (show-paren-mode 1))
#+end_src

** remove whitespace

TODO: doesn't seem to work properly?

#+begin_src elisp :tangle no
(use-package ws-butler
  :hook (text-mode . prog-mode)
  )
#+end_src


** Version control systems

#+begin_src elisp
(use-package magit
  :bind ("C-x g" . magit-status))

(use-package magit-todos)
#+end_src


* Tree-sitter

TODO: clean this up

#+begin_src elisp
(use-package treesit-auto
  :config
  (setq treesit-auto-install t)
  (global-treesit-auto-mode)
  )
#+end_src

* Language Server Protocol

~~ From https://robert.kra.hn/posts/rust-emacs-setup/#lsp-mode-and-lsp-ui-mode ~~

Deps:

#+begin_src sh :tangle no
pip install ruff
npm i -g bash-language-server
rustup component add rust-analyzer
apt install shellcheck
#+end_src


TODO: add ruff to eglot

#+begin_src elisp

(setq-default sh-shellcheck-arguments "-x") ; follow sourced libraries
(add-hook 'sh-base-mode-hook 'flymake-mode) ; requires shellcheck


(use-package yasnippet
  :config
  (use-package yasnippet-snippets)
  (yas-reload-all)
  (add-hook 'prog-mode-hook 'yas-minor-mode)
  (add-hook 'text-mode-hook 'yas-minor-mode)
  (yas-global-mode t))

(use-package eglot
  :after yasnippet
  :straight `(:type ,(if (< emacs-major-version 29) 'git 'built-in))
  ;;:hook (
  ;;      ((markdown-mode text-mode python-mode python-ts-mode c-mode c-ts-mode c++-mode c++-ts-mode) . eglot-ensure)
  ;;      (eglot-managed-mode . eglot-inlay-hints-mode)
  ;;)
  :custom
  (eglot-autoshutdown t)
  (eglot-sync-connect 0) ; async, do not block
  (eglot-extend-to-xref t) ; can be interesting!
  (eglot-report-progress nil) ; disable annoying messages in echo area!
  )


(use-package eldoc
  :straight (:type built-in)
  :custom
  (eldoc-documentation-strategy #'eldoc-documentation-compose))

(use-package eldoc-box
  :straight t
  :hook (prog-mode . eldoc-box-hover-at-point-mode)
  :hook (eglot-managed-mode . eldoc-box-hover-at-point-mode))

(setq-default tab-always-indent 'complete) ; Indent first then try completions


;; From https://github.com/minad/corfu#installation-and-configuration
(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  (corfu-quit-no-match 'separator)      ;; Never quit, even if there is no match
  (corfu-preview-current nil)    ;; Disable current candidate preview
  (corfu-preselect-first nil)    ;; Disable candidate preselection
  (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  (corfu-echo-documentation nil)
  (corfu-scroll-margin 5)        ;; Use scroll margin
  (corfu-auto-delay 1.0)
  (corfu-auto-prefix 0)
  (completion-styles '(basic))
  (corfu-popupinfo-delay 0.1)
  (corfu-popupinfo-max-height 30)
  :straight (corfu :files (:defaults "extensions/*")
		   :includes (corfu-info corfu-history))
  :bind
  (:map corfu-map
	("TAB" . corfu-next)
	([tab] . corfu-next)
	("S-TAB" . corfu-previous)
	([backtab] . corfu-previous))
  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode))


(use-package orderless
  :custom
  (completion-styles '(substring orderless basic))
  (orderless-component-separator 'orderless-escapable-split-on-space)
  (read-file-name-completion-ignore-case t)
  (read-buffer-completion-ignore-case t)
  (completion-ignore-case t)
  )

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))


(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-use-icons t)
  (kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face background
  (kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
  (kind-icon-blend-frac 0.08)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter) ; Enable `kind-icon'
  )

#+end_src

* PDF-Tools

#+begin_src elisp
;; Special case for pdf-tools that has recently (2022) changed maintainer
(straight-use-package
 '(pdf-tools :type git :host github :repo "vedang/pdf-tools"))
#+end_src

* TRAMP

#+begin_src elisp
;; (use-package tramp
;;   :config
;;   (setq enable-remote-dir-locals t)
;;   (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
;;   )
#+end_src

* Flymake

#+begin_src elisp
(use-package flymake)

(use-package flymake-collection
  :hook (after-init . flymake-collection-hook-setup))

#+end_src

* Rust lang

https://rust-analyzer.github.io/manual.html#rust-analyzer-language-server-binary

#+begin_src sh :tangle no
rustup component add rust-analyzer
#+end_src

#+begin_src elisp
(setq rustic-lsp-client 'eglot)
(use-package rustic)
#+end_src

* YAML

#+begin_src elisp
(use-package yaml-mode)
#+end_src

** Colours

#+begin_src elisp :tangle no
(use-package rainbow-mode
  :config
  (setq rainbow-x-colors nil)

  ;; TODO: rgb_linear and rgba_linear
  ;; TODO: see if it is possible to add transparency support?
  ;; TODO move to tree-sitter? with svg-lib too?
  (defvar
    rainbow-custom-keywords
    '(
      ("Color::rgb(\s*\\([0-9]\\{1,3\\}\\(?:\.[0-9]\\)?\\(?:\s*%\\)?\\)\s*,\s*\\([0-9]\\{1,3\\}\\(?:\\.[0-9]\\)?\\(?:\s*%\\)?\\)\s*,\s*\\([0-9]\\{1,3\\}\\(?:\\.[0-9]\\)?\\(?:\s*%\\)?\\)\s*)"
       (0 (rainbow-colorize-rgb)))
      ("Color::rgba(\s*\\([0-9]\\{1,3\\}\\(?:\\.[0-9]\\)?\\(?:\s*%\\)?\\)\s*,\s*\\([0-9]\\{1,3\\}\\(?:\\.[0-9]\\)?\\(?:\s*%\\)?\\)\s*,\s*\\([0-9]\\{1,3\\}\\(?:\\.[0-9]\\)?\\(?:\s*%\\)?\\)\s*,\s*[0-9]*\.?[0-9]+\s*%?\s*)"
       (0 (rainbow-colorize-rgb)))
      ("Color::hsl(\s*\\([0-9]\\{1,3\\}\\)\s*,\s*\\([0-9]\\{1,3\\}\\)\s*%\s*,\s*\\([0-9]\\{1,3\\}\\)\s*%\s*)"
       (0 (rainbow-colorize-hsl)))
      ("Color::hsla(\s*\\([0-9]\\{1,3\\}\\)\s*,\s*\\([0-9]\\{1,3\\}\\)\s*%\s*,\s*\\([0-9]\\{1,3\\}\\)\s*%\s*,\s*[0-9]*\.?[0-9]+\s*%?\s*)"
       (0 (rainbow-colorize-hsl)))
      ("Color::hex(\\\"\\([0-9A-Fa-f]\\{3,8\\}\\)\\\")"
       (1 (rainbow-colorize-hexadecimal-without-sharp 1))))
    "Font-lock keywords to add for custom matching.")

  (add-hook 'rainbow-keywords-hook (lambda () (if (eq rainbow-mode t)
						  (font-lock-add-keywords
						   nil
						   rainbow-custom-keywords
						   t)
						(font-lock-remove-keywords
						 nil
						 rainbow-custom-keywords)
						)))

  (add-hook 'prog-mode-hook 'rainbow-mode))

#+end_src

** Hightlight some keywords

OBSOLETE

From https://writequit.org/org/

TODO: make colour match Nano theme

#+begin_src elisp :tangle no
(defun my/add-watchwords ()
  "Highlight FIXME, TODO, and NOCOMMIT in code TODO"
  (font-lock-add-keywords
   nil '(("\\<\\(FIXME:?\\|TODO:?\\|NOCOMMIT:?\\)\\>"
	  1 '((:foreground "#d08770") (:weight bold)) t))))

(add-hook 'prog-mode-hook #'my/add-watchwords)

#+end_src

** UTF-8

#+begin_src elisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
#+end_src

** Git fringe

#+begin_src elisp


(use-package git-gutter-fringe
  :straight (git-gutter-fringe :type git :host github :repo "emacsorphanage/git-gutter-fringe")
  :diminish 'git-gutter-mode
  :config (global-git-gutter-mode 't)
  (setq git-gutter:modified-sign "Δ"
	git-gutter:added-sign "+"
	git-gutter:deleted-sign "-"))


#+end_src


** Multiple cursors

#+begin_src elisp
(use-package multiple-cursors
  :config
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+end_src

** All the icons

#+begin_src elisp
(use-package all-the-icons
  :straight (all-the-icons :type git :host github :repo "domtronn/all-the-icons.el" :branch "svg" :files (:defaults "svg"))
  :if (display-graphic-p))

(use-package all-the-icons-completion
  :init (all-the-icons-completion-mode))

#+end_src

** Treemacs

Config from https://medspx.fr/blog/Debian/emacs_2020/

#+begin_src elisp

(use-package treemacs
  :after (treemacs-all-the-icons)
  :hook (treemacs-mode . no_code_mode)
  :config
  (treemacs-resize-icons 14)
  (treemacs-follow-mode t)
  (treemacs-tag-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode 'always)
  (treemacs-hide-gitignored-files-mode nil)
  (treemacs-load-theme "all-the-icons")
  )

(use-package treemacs-magit
  :after (treemacs magit)
  )
#+end_src


** Minimap

#+begin_src elisp :tangle no
(use-package minimap
  :diminish minimap-mode
  :init
  (setq minimap-window-location 'right
	minimap-width-fraction 0.04
	minimap-hide-scroll-bar nil
	minimap-hide-fringes nil
	minimap-dedicated-window t
	minimap-minimum-width 15)
  :custom-face
  (minimap-font-face ((t (:height 13 :weight bold :width condensed
				  :spacing dual-width :family "VT323"))))
  (minimap-active-region-background ((t (:extend t :background "gray24"))))
  )
#+end_src

** CSV

#+begin_src elisp


(use-package csv-mode :straight t
  ;; Always enter CSV mode in align mode; makes it easier to read.
  :hook (csv-mode . csv-align-mode))


#+end_src

** Ripgrep


#+begin_src elisp
(use-package rg
  :config (rg-enable-menu))
#+end_src



** Editorconfig

#+begin_src elisp
(use-package editorconfig
  :straight t
  :hook (prog-mode . editorconfig-mode)
  )
#+end_src

** Clang-format

#+begin_src elisp
(use-package clang-format
  :straight t)
#+end_src

** Display 80 columns limit

#+begin_src elisp
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
(add-hook 'rst-mode-hook #'display-fill-column-indicator-mode)
#+end_src

** Automatically refresh buffers when files are updated!

#+begin_src elisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
#+end_src

* Programming

** C++

If lsp can't find system headers, you might be missing

#+begin_src bash :tangle no
sudo apt-get install libc++-dev or libstdc++-dev
#+end_src

Make sure you have the correct one installed, and the right version.
(Use latest by default).

To get the most out of it, your project needs a compile_commands.json
If not using a builder that can export compile_commands.json, you can
user bear https://github.com/rizsotto/Bear

You can add a .clangd at the root of the workspace you are working on.
Can also be a user file.
This file allows will control how clangd acts, and will refine or give
more details during analysis of the code.

Example

#+begin_src
CompileFlags:
CompilationDatabase: Ancestors

Diagnostics:
ClangTidy:
Add: [modernize*, bugprone*, misc*, performance*, readability*]
Remove: modernize-use-trailing-return-type
UnusedIncludes: Strict

---

If:
PathMatch: .*\.hh
CompileFlags:
Add: [-xc++]
#+end_src

** Python

#+begin_src elisp
(use-package python
  :config
  (setq python-indent 4)
  )


(use-package flymake-ruff
    :ensure t
    :hook (python-mode . flymake-ruff-load))

#+end_src


** Projectile

#+begin_src elisp
(use-package projectile
  :diminish projectile
  :config   (progn
	      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
	      (projectile-mode +1)
	      (setq projectile-completion-system 'default)
	      (setq projectile-enable-caching t)
	      (setq projectile-indexing-method 'alien)
	      (add-to-list 'projectile-globally-ignored-files "node_modules")
	      (add-to-list 'projectile-globally-ignored-files ".cache")
	      (add-to-list 'projectile-globally-ignored-files "_cache")
	      )
  )

(use-package treemacs-projectile
  :after (treemacs projectile)
  :custom
  (treemacs-project-follow-mode 1)
  )

#+end_src

* Stuff

TODO: sort out

#+begin_src elisp

(use-package gnuplot)

(use-package graphviz-dot-mode)
(add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))

#+end_src

* Which-key

#+begin_src elisp
(use-package which-key
  :custom
  (which-key-mode t)
  )
#+end_src


* Docker

#+begin_src elisp
(use-package dockerfile-mode
  :mode ("Dockerfile\\'" . dockerfile-mode))
#+end_src


* Mastodon

#+begin_src elisp
(use-package mastodon
  :config
  (setq mastodon-instance-url "https://mastodon.social")
  (setq mastodon-active-user "shadowmitia")
  )
#+end_src


*


From https://github.com/Atman50/emacs-config

"When a file is opened and it is determined there is no mode (fundamental-mode) this code reads the first line of the file looking for an appropriate shebang for either python or bash and sets the mode for the file."

#+begin_src elisp

(cl-defun my-find-file-hook ()
  "If `fundamental-mode', look for script type so the mode gets properly set.
Script-type is read from #!/... at top of file."
  (if (eq major-mode 'fundamental-mode)
      (ignore-errors
	(save-excursion
	  (goto-char (point-min))
	  (re-search-forward "^#!\s*/.*/\\(python\\|bash\\|sh\\|ruby\\|make\\|perl\\|lua\\).*$")
	  (cond ((string= (match-string 1) "python") (python-mode))
	        ((string= (match-string 1) "bash") (bash-mode))
		((string= (match-string 1) "sh") (sh-mode))
		((string= (match-string 1) "ruby") (ruby-mode))
		((string= (match-string 1) "make") (makefile-mode))
		((string= (match-string 1) "perl") (perl-mode))
		((string= (match-string 1) "lua") (lua-mode))
	  )))))
(add-hook 'find-file-hook #'my-find-file-hook)
#+end_src

#+begin_src elisp
(use-package systemd :straight t)


(use-package repo
  :straight t
  :preface
  (defconst +repo-available-p (executable-find "repo"))
  :when +repo-available-p)

(use-package xkcd :straight t)
#+end_src


* Centaur tabs

https://github.com/ema2159/centaur-tabs

Investigate?

* Random

#+begin_src elisp
(setq fill-column 80)

;; don't interrupt me with native compilation warnings
(setq native-comp-async-report-warnings-errors nil)

#+end_src

* Random perf configs

#+begin_src elisp
(setq auto-window-vscroll nil) ;; https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746
#+end_src

* References

Emacs manual and tutorial
https://www.masteringemacs.org
https://systemcrafters.net/videos/
https://github.com/daviwil/emacs-from-scratch
https://github.com/rougier/dotemacs/blob/master/dotemacs.org
https://writequit.org/org/
https://medspx.fr/blog/Debian/emacs_2020/
https://sachachua.com/dotemacs/index.html
https://codeberg.org/takeonrules/dotemacs/src/branch/main/emacs.d/configuration.orghttps://kristofferbalintona.me/posts/202202270056/
https://kristofferbalintona.me/posts/202202270056/
https://github.com/abougouffa/minemacs
