#+title: Emacs configuratio

You need to install https://github.com/rougier/nano-emacs at the root of .emacs.d


* Initialise and configure package manager

  `package.el` is used to manage packages on emacs.


  #+begin_src emacs-lisp
    (set-language-environment "UTF-8")

    (require 'package)

;    (when (< emacs-major-version 27)
;      (package-initialize))

    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives
                 '("melpa" . "https://melpa.org/packages/"))


    ;; Bootstrap `use-package'
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-when-compile
      (require 'use-package))

    ;; Always havve the packages installed and ready to be used
    (setq use-package-always-ensure t)

    (use-package auto-package-update
      :config
      (setq auto-package-update-delete-old-versions t)
      (setq auto-package-update-hide-results t)
      (auto-package-update-maybe))

    (use-package nano
      :load-path "nano-emacs"
      :init

      ;; Window layout (optional)
      (require 'nano-layout)

      ;; Theming Command line options (this will cancel warning messages)
      (add-to-list 'command-switch-alist '("-dark"   . (lambda (args))))
      (add-to-list 'command-switch-alist '("-light"  . (lambda (args))))
      (add-to-list 'command-switch-alist '("-default"  . (lambda (args))))

      (cond
       ((member "-default" command-line-args) t)
       ((member "-dark" command-line-args) (require 'nano-theme-dark))
       (t (require 'nano-theme-light)))

      ;; Customize support for 'emacs -q' (Optional)
      ;; You can enable customizations by creating the nano-custom.el file
      ;; with e.g. `touch nano-custom.el` in the folder containing this file.
      (let* ((this-file  (or load-file-name (buffer-file-name)))
             (this-dir  (file-name-directory this-file))
             (custom-path  (concat this-dir "nano-custom.el")))
        (when (and (eq nil user-init-file)
                   (eq nil custom-file)
                   (file-exists-p custom-path))
          (setq user-init-file this-file)
          (setq custom-file custom-path)
          (load custom-file)))

      ;; Theme
      (require 'nano-faces)
      (nano-faces)

      (require 'nano-theme)
      (nano-theme)

      (require 'nano-theme-dark)

      ;; Nano default settings (optional)
      (require 'nano-defaults)

      ;; Nano session saving (optional)
      (require 'nano-session)

      ;; Nano header & mode lines (optional)
      (require 'nano-modeline)

      ;; Nano key bindings modification (optional)
      (require 'nano-bindings)

      ;; Nano counsel configuration (optional)
      ;; Needs "counsel" package to be installed (M-x: package-install)
      ;; (require 'nano-counsel)

      ;; Nano writer
      (require 'nano-writer)

      ;; Welcome message (optional)
      (let ((inhibit-message t))
        (message "Welcome to GNU Emacs / N Î› N O edition")
        (message (format "Initialization time: %s" (emacs-init-time))))

      ;; Splash and help (optional)
      (add-to-list 'command-switch-alist '("-no-splash" . (lambda (args))))
      (unless (member "-no-splash" command-line-args)
        (require 'nano-help)
        (require 'nano-splash))
      )



    (menu-bar-mode -1)
    (toggle-scroll-bar -1)
    (tool-bar-mode -1)

    (setq inhibit-startup-screen t)

    (setq gc-cons-threshold 100000000)

    ;; (use-package spacemacs-common
    ;;     :ensure spacemacs-theme
    ;;     :init (load-theme 'spacemacs-dark t))


    (use-package company-box
      :hook (company-mode . company-box-mode)
      :custom
      (company-box-max-candidates 50)
      (company-box-show-single-candidate 'always))

    (use-package magit
      :bind ("C-x g" . magit-status))

    (use-package git-gutter
      :config
      (global-git-gutter-mode 't))

    (use-package lsp-mode
      :hook (rustic-mode . lsp)
      :config
      (setq lsp-completion-provider :capf)
      (setq lsp-completion-enable t)
      (setq read-process-output-max (* 2048 4096))
      :commands lsp
      )

    (use-package company
      :init (global-company-mode)
      )

    (use-package lsp-ui :commands lsp-ui-mode)

    (use-package flycheck
      :config
      (add-hook 'after-init-hook 'global-flycheck-mode)
      (add-hook 'flycheck-mode-hook 'jc/use-eslint-from-node-modules)
      (add-to-list 'flycheck-checkers 'proselint)
      (setq-default flycheck-highlighting-mode 'lines)
      ;; Define fringe indicator / warning levels
      (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
        (vector #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00011100
                #b00111110
                #b00111110
                #b00111110
                #b00011100
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000))
      (flycheck-define-error-level 'error
        :severity 2
        :overlay-category 'flycheck-error-overlay
        :fringe-bitmap 'flycheck-fringe-bitmap-ball
        :fringe-face 'flycheck-fringe-error)
      (flycheck-define-error-level 'warning
        :severity 1
        :overlay-category 'flycheck-warning-overlay
        :fringe-bitmap 'flycheck-fringe-bitmap-ball
        :fringe-face 'flycheck-fringe-warning)
      (flycheck-define-error-level 'info
        :severity 0
        :overlay-category 'flycheck-info-overlay
        :fringe-bitmap 'flycheck-fringe-bitmap-ball
        :fringe-face 'flycheck-fringe-info))

    (use-package flycheck-rust
      :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
      )

    (use-package rust-mode :disabled)

    (use-package rustic
      :after (rust-mode)
      :mode ("\\.rs\\'" . rustic-mode)
      :bind
      ("C-c C-c" . rustic-compile)
      :config
      (setq indent-tabs-mode nil)
      (setq rustic-format-on-save t)
      (setq lsp-rust-analyzer-cargo-watch-command "clippy")
      (setq rustic-flycheck-clippy-params "--message-format=json")
      (add-to-list 'company-backends
                   '(company-rust :with company-capf))
      :commands rustic-mode
      )

    (use-package cargo
      :hook (rustic-mode . cargo-minor-mode)
      :diminish cargo-minor-mode)

    (use-package smartparens
      :config
      (add-hook 'prog-mode-hook 'smartparens-mode))

    (use-package rainbow-delimiters
      :config
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

    (use-package rainbow-mode
      :config
      (setq rainbow-x-colors nil)
      (add-hook 'prog-mode-hook 'rainbow-mode))

    (use-package org
      :init
      (org-babel-do-load-languages
       'org-babel-load-languages
       '(
         (emacs-lisp . t)
         (org . t)
         (shell . t)
         (C . t)
         (python . t)
         (css . t)
         (ocaml . t)
         (js . t)
         (latex . t)
         (dot . t)
         (ditaa . t)
         (makefile . t)
         (processing .t)
         (sql . t)
         (sqlite . t)
         ))

      :config
      (setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)
      )

    (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
          backup-by-copying t    ; Don't delink hardlinks
          version-control t      ; Use version numbers on backups
          delete-old-versions t  ; Automatically delete excess backups
          kept-new-versions 20   ; how many of the newest versions to keep
          kept-old-versions 5    ; and how many of the old
          )

    (add-hook 'before-save-hook 'delete-trailing-whitespace)

    (use-package expand-region
      :bind ("C-=" . er/expand-region))

    (setq org-directory "~/kDrive/dropbox/org/")

    (setq org-src-fontify-natively 't)
    (setq org-src-tab-acts-natively t)

    (use-package writegood-mode
      :bind ("C-c g" . writegood-mode)
      :config
      (add-to-list 'writegood-weasel-words "actionable"))

    (use-package files
      :ensure nil
      :custom
      (backup-by-copying t)
      (backup-directory-alist `(("." . ,(expand-file-name "backups/"))))
      (delete-old-versions t)
      (version-control t))

  #+end_src


  #+begin src
(use-package gdscript-mode)
  #+end_src

  References :
  - https://jamiecollinson.com/blog/my-emacs-config/
